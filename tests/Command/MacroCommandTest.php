<?php

declare(strict_types=1);

namespace App\Tests\Command;

use App\Command\BurnFuelCommand;
use App\Command\CheckFuelCommand;
use App\Exception\CommandException;
use App\Command\MacroCommand;
use App\Exception\BurnFuelException;
use App\Exception\CheckFuelException;
use Exception;
use PHPUnit\Framework\TestCase;

class MacroCommandTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->checkFuelCommand = $this->createMock(CheckFuelCommand::class);
        $this->burnFuelCommand  = $this->createMock(BurnFuelCommand::class);
        $this->macroCommand     = new MacroCommand([
            $this->checkFuelCommand,
            $this->burnFuelCommand,
        ]);
    }

    /**
     * @throws Exception
     */
    public function testExecuteWithException(): void
    {
        $this->checkFuelCommand->expects($this->once())
            ->method('execute')
            ->willThrowException(new CheckFuelException("The object has run out of fuel"));

        $this->expectException(CommandException::class);
        $this->expectExceptionMessage('The object has run out of fuel');

        $this->macroCommand->execute();

        $this->checkFuelCommand->expects($this->once())
            ->method('execute');
        $this->burnFuelCommand->expects($this->once())
            ->method('execute')
            ->willThrowException(new BurnFuelException("The object has run out of fuel"));

        $this->expectException(CommandException::class);
        $this->expectExceptionMessage('The object has run out of fuel');

        $this->macroCommand->execute();
    }

    /**
     * @throws Exception
     */
    public function testExecute(): void
    {
        $this->checkFuelCommand->expects($this->once())
            ->method('execute');
        $this->burnFuelCommand->expects($this->once())
            ->method('execute');

        $this->macroCommand->execute();
    }
}