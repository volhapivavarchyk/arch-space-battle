<?php

declare(strict_types=1);

namespace App\Tests\Command;

use App\Command\BurnFuelCommand;
use App\Domain\FuelBurnableInterface;
use App\Exception\BurnFuelException;
use Exception;
use Generator;
use PHPUnit\Framework\TestCase;

class BurnFuelCommandTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->fuelBurnableObject = $this->createMock(FuelBurnableInterface::class);
        $this->burnFuelCommand    = new BurnFuelCommand($this->fuelBurnableObject);
    }

    /**
     * @throws Exception
     */
    public function testExecuteWithException(): void
    {
        $this->fuelBurnableObject->expects($this->once())
            ->method('getLevel')
            ->willReturn(2);
        $this->fuelBurnableObject->expects($this->once())
            ->method('getVelocity')
            ->willReturn(3);

        $this->expectException(BurnFuelException::class);
        $this->expectExceptionMessage('The object has run out of fuel');

        $this->burnFuelCommand->execute();
    }

    /**
     * @dataProvider dataProvider
     * @throws Exception
     */
    public function testExecute(array $input, int $expected): void
    {
        $this->fuelBurnableObject->expects($this->once())
            ->method('getLevel')
            ->willReturn($input[0]);
        $this->fuelBurnableObject->expects($this->once())
            ->method('getVelocity')
            ->willReturn($input[1]);

        $this->fuelBurnableObject->expects($this->once())
            ->method('setLevel')
            ->with($expected);

        $this->burnFuelCommand->execute();
    }

    /**
     * @return Generator<array>
     */
    public function dataProvider(): Generator
    {
        yield [[2, 2], 0];
        yield [[2, 1], 1];
    }
}